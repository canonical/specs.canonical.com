name: Juju deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  JUJU_MODEL: stg-specs-canonical-com
  JUJU_CONTROLLER: juju-controller-36-staging-ps6
  JUJU_VERSION: 3.6/stable

  # see ~/.vaultrc in your Juju model
  VAULT_ADDR: https://vault.admin.canonical.com:8200
  VAULT_SECRET_PATH_ROLE: secret/prodstack6/roles/stg-specs-canonical-com
  VAULT_SECRET_PATH_COMMON: secret/prodstack6/juju/common
  # Secrets:
  #  VAULT_APPROLE_RILE_ID (uuid)
  #  VAULT_APPROLE_SECRET_ID (uuid)

jobs:
  rockcraft-pack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup LXD
        uses: canonical/setup-lxd@main

      - name: Install rockcraft
        run: |
          sudo snap install --classic rockcraft

      - name: Pack project
        id: rockcraft-pack
        run: |
          sudo rockcraft pack  -v

      - name: Upload rock file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JUJU_MODEL }}.rock
          path: ./*.rock

      - name: Set image URL
        id: image_url
        run: |
          IMAGE_URL=ghcr.io/${{ github.repository }}:$(date +%s)-${GITHUB_SHA:0:7}
          echo "rock_file_url=$IMAGE_URL" >> $GITHUB_OUTPUT
          echo -e "> [!NOTE]\n> Rockcraft OCI image: $IMAGE_URL" >> $GITHUB_STEP_SUMMARY

      - name: Push to GHCR
        run: |
          skopeo --insecure-policy copy oci-archive:$(ls *.rock) docker://${{ steps.image_url.outputs.rock_file_url }} --dest-creds ${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}

  charmcraft-pack:
    runs-on: ubuntu-latest
    outputs:
      charm_file: ${{ steps.charmcraft-pack.outputs.charm_file }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache charm directory
        id: charm-cache
        uses: actions/cache@v4
        with:
          path: ./*.charm
          key: ${{ runner.os}}-charm-${{ hashFiles('./charm/**') }}

      - name: Setup LXD
        if: steps.charm-cache.outputs.cache-hit != 'true'
        uses: canonical/setup-lxd@main

      - name: Install charmcraft
        if: steps.charm-cache.outputs.cache-hit != 'true'
        run: |
          sudo snap install --classic charmcraft

      - name: Pack charm
        if: steps.charm-cache.outputs.cache-hit != 'true'
        id: charmcraft-pack
        run: |
          sudo charmcraft pack -v --project-dir ./charm

      - name: Upload charm file
        uses: actions/upload-artifact@v4
        id: charm-upload
        with:
          name: ${{ env.JUJU_MODEL }}.charm
          path: ./*.charm

      - name: Set charm URL
        id: charm_url
        run: |
          if [ -f ${{ steps.charm-cache.outputs.cache-hit }} ]; then
            echo -e "> [!NOTE]\n> Charm pack file (cached): ${{ steps.charm-upload.outputs.artifact-url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo -e "> [!NOTE]\n> Charm pack file: ${{ steps.charm-upload.outputs.artifact-url }}" >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    needs: [rockcraft-pack, charmcraft-pack]
    runs-on:
      [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install juju
        run: |
          sudo snap install --classic --channel=$JUJU_VERSION juju
          sudo snap install --classic vault

      - name: Download rock file
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JUJU_MODEL }}.rock

      - name: Download charm file
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JUJU_MODEL }}.charm

      - name: Configure Vault and Juju
        run: |
          export TF_VAR_login_approle_role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }}
          export TF_VAR_login_approle_secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }}
          export VAULT_TOKEN=$(vault write -f -field=token auth/approle/login role_id=${TF_VAR_login_approle_role_id} secret_id=${TF_VAR_login_approle_secret_id}) 
          mkdir -p ~/.local/share/juju
          vault read -field=controller_config "${VAULT_SECRET_PATH_COMMON}/controllers/$JUJU_CONTROLLER" | base64 -d > ~/.local/share/juju/controllers.yaml
          USERNAME=$(vault read -field=username "${VAULT_SECRET_PATH_ROLE}/juju")
          PASSWORD=$(vault read -field=password "${VAULT_SECRET_PATH_ROLE}/juju")
          printf "controllers:\n  $JUJU_CONTROLLER:\n    user: %s\n    password: %s\n" "$USERNAME" "$PASSWORD" > ~/.local/share/juju/accounts.yaml

      - name: Deploy charm
        run: |
          export JUJU_MODEL=admin/$JUJU_MODEL
          echo "Deploying to $JUJU_MODEL"
          juju status --relations
